'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_pn1anpnby = function () {
  var path = '/home/ubuntu/broken-link-checker-local/src/BrokenLinkChecker.js',
      hash = '2f1f95833337d8d9de78921f83ce7c2740979a4c',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/ubuntu/broken-link-checker-local/src/BrokenLinkChecker.js',
    statementMap: {
      '0': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 22
        }
      },
      '1': {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 27
        }
      },
      '2': {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 22
        }
      },
      '3': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 21
        }
      },
      '4': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 25
        }
      },
      '5': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 81,
          column: 7
        }
      },
      '6': {
        start: {
          line: 61,
          column: 6
        },
        end: {
          line: 63,
          column: 7
        }
      },
      '7': {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 43
        }
      },
      '8': {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 87
        }
      },
      '9': {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 70,
          column: 27
        }
      },
      '10': {
        start: {
          line: 72,
          column: 6
        },
        end: {
          line: 72,
          column: 51
        }
      },
      '11': {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 42
        }
      },
      '12': {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 55
        }
      },
      '13': {
        start: {
          line: 79,
          column: 40
        },
        end: {
          line: 79,
          column: 53
        }
      },
      '14': {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 80,
          column: 50
        }
      },
      '15': {
        start: {
          line: 80,
          column: 37
        },
        end: {
          line: 80,
          column: 48
        }
      },
      '16': {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 110,
          column: 7
        }
      },
      '17': {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 109,
          column: 7
        }
      },
      '18': {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 42
        }
      },
      '19': {
        start: {
          line: 94,
          column: 19
        },
        end: {
          line: 99,
          column: 9
        }
      },
      '20': {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 39
        }
      },
      '21': {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 106,
          column: 10
        }
      },
      '22': {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 47
        }
      },
      '23': {
        start: {
          line: 108,
          column: 32
        },
        end: {
          line: 108,
          column: 45
        }
      },
      '24': {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 136,
          column: 7
        }
      },
      '25': {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 133,
          column: 14
        }
      },
      '26': {
        start: {
          line: 129,
          column: 10
        },
        end: {
          line: 129,
          column: 32
        }
      },
      '27': {
        start: {
          line: 131,
          column: 10
        },
        end: {
          line: 131,
          column: 40
        }
      },
      '28': {
        start: {
          line: 135,
          column: 6
        },
        end: {
          line: 135,
          column: 28
        }
      },
      '29': {
        start: {
          line: 144,
          column: 21
        },
        end: {
          line: 144,
          column: 38
        }
      },
      '30': {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 31
        }
      },
      '31': {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      '32': {
        start: {
          line: 148,
          column: 6
        },
        end: {
          line: 148,
          column: 26
        }
      },
      '33': {
        start: {
          line: 149,
          column: 6
        },
        end: {
          line: 149,
          column: 30
        }
      },
      '34': {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 151,
          column: 48
        }
      },
      '35': {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      '36': {
        start: {
          line: 163,
          column: 6
        },
        end: {
          line: 163,
          column: 57
        }
      },
      '37': {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      '38': {
        start: {
          line: 167,
          column: 6
        },
        end: {
          line: 167,
          column: 26
        }
      },
      '39': {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 28
        }
      },
      '40': {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 172,
          column: 16
        }
      },
      '41': {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 191,
          column: 39
        }
      },
      '42': {
        start: {
          line: 180,
          column: 18
        },
        end: {
          line: 180,
          column: 37
        }
      },
      '43': {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      '44': {
        start: {
          line: 183,
          column: 10
        },
        end: {
          line: 185,
          column: 49
        }
      },
      '45': {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 184,
          column: 48
        }
      },
      '46': {
        start: {
          line: 185,
          column: 26
        },
        end: {
          line: 185,
          column: 47
        }
      },
      '47': {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 33
        }
      },
      '48': {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 35
        }
      },
      '49': {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 37
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 51,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 59,
            column: 3
          }
        },
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 82,
            column: 3
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 24
          }
        },
        loc: {
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 81,
            column: 5
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 35
          }
        },
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 53
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 80,
            column: 31
          }
        },
        loc: {
          start: {
            line: 80,
            column: 37
          },
          end: {
            line: 80,
            column: 48
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 89,
            column: 3
          }
        },
        loc: {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 111,
            column: 3
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 90,
            column: 23
          },
          end: {
            line: 90,
            column: 24
          }
        },
        loc: {
          start: {
            line: 90,
            column: 44
          },
          end: {
            line: 110,
            column: 5
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 108,
            column: 25
          }
        },
        loc: {
          start: {
            line: 108,
            column: 32
          },
          end: {
            line: 108,
            column: 45
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 137,
            column: 3
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 119,
            column: 24
          }
        },
        loc: {
          start: {
            line: 119,
            column: 44
          },
          end: {
            line: 136,
            column: 5
          }
        }
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 128,
            column: 14
          },
          end: {
            line: 128,
            column: 15
          }
        },
        loc: {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 132,
            column: 9
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 143,
            column: 2
          },
          end: {
            line: 143,
            column: 3
          }
        },
        loc: {
          start: {
            line: 143,
            column: 17
          },
          end: {
            line: 153,
            column: 3
          }
        }
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 161,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        },
        loc: {
          start: {
            line: 161,
            column: 18
          },
          end: {
            line: 173,
            column: 3
          }
        }
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 178,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        },
        loc: {
          start: {
            line: 178,
            column: 11
          },
          end: {
            line: 192,
            column: 3
          }
        }
      },
      '14': {
        name: '(anonymous_14)',
        decl: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 180,
            column: 13
          }
        },
        loc: {
          start: {
            line: 180,
            column: 18
          },
          end: {
            line: 180,
            column: 37
          }
        }
      },
      '15': {
        name: '(anonymous_15)',
        decl: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        loc: {
          start: {
            line: 181,
            column: 18
          },
          end: {
            line: 189,
            column: 7
          }
        }
      },
      '16': {
        name: '(anonymous_16)',
        decl: {
          start: {
            line: 184,
            column: 18
          },
          end: {
            line: 184,
            column: 19
          }
        },
        loc: {
          start: {
            line: 184,
            column: 26
          },
          end: {
            line: 184,
            column: 48
          }
        }
      },
      '17': {
        name: '(anonymous_17)',
        decl: {
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 185,
            column: 19
          }
        },
        loc: {
          start: {
            line: 185,
            column: 26
          },
          end: {
            line: 185,
            column: 47
          }
        }
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        loc: {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 190,
            column: 35
          }
        }
      },
      '19': {
        name: '(anonymous_19)',
        decl: {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 191,
            column: 14
          }
        },
        loc: {
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 191,
            column: 37
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 23
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 23
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 63,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 63,
            column: 7
          }
        }, {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 63,
            column: 7
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        }, {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 91,
            column: 10
          },
          end: {
            line: 91,
            column: 28
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 91,
            column: 10
          },
          end: {
            line: 91,
            column: 15
          }
        }, {
          start: {
            line: 91,
            column: 19
          },
          end: {
            line: 91,
            column: 28
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 95,
            column: 10
          },
          end: {
            line: 97,
            column: 20
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 38
          }
        }, {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 20
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 131,
            column: 38
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 131,
            column: 20
          }
        }, {
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 131,
            column: 38
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        }, {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }, {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _child_process = require('child_process');

var _path = require('path');

var _url = require('url');

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _getPort = require('get-port');

var _getPort2 = _interopRequireDefault(_getPort);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _cliOptions = require('./cliOptions');

var _cliOptions2 = _interopRequireDefault(_cliOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The Command Line Interface.
 */
class BrokenLinkChecker {

  /**
   * Creates a new BrokenLinkChecker with the specified options.
   * @param {String[]} argv The arguments to handle.
   */
  constructor(argv = (++cov_pn1anpnby.b[0][0], [])) {
    ++cov_pn1anpnby.f[0];
    ++cov_pn1anpnby.s[0];

    /**
     * The arguments to handle.
     * @type {String[]}
     */
    this._argv = argv;

    /**
     * `true` if serving a directory is needed to run the check.
     * @type {Boolean}
     */
    ++cov_pn1anpnby.s[1];
    this.needServer = true;

    /**
     * The path to check. Only set if a path is given as input.
     * @type {String}
     */
    ++cov_pn1anpnby.s[2];
    this.path = false;

    /**
     * The URL to check. Only set if a URL is given as input.
     * @type {String}
     */
    ++cov_pn1anpnby.s[3];
    this.url = false;

    /**
     * The parsed command line options used.
     * @type {Object}
     */
    ++cov_pn1anpnby.s[4];
    this.options = false;
  }

  /**
   * Starts a server serving {@link BrokenLinkChecker#path} on the speficied port.
   * @param {Number} port The port to server on.
   * @return {Promise<Number, Error>} Resolved with the port used, rejected with an error if
   * listening on the port failed.
   */
  startServer(port) {
    ++cov_pn1anpnby.f[1];
    ++cov_pn1anpnby.s[5];

    return new Promise((resolve, reject) => {
      ++cov_pn1anpnby.f[2];
      ++cov_pn1anpnby.s[6];

      if (!this.path) {
        ++cov_pn1anpnby.b[1][0];
        ++cov_pn1anpnby.s[7];

        reject(new Error('No path given'));
      } else {
        ++cov_pn1anpnby.b[1][1];
      }

      ++cov_pn1anpnby.s[8];
      console.log(_chalk2.default.white('Starting server for path:'), _chalk2.default.yellow(this.path));
      /**
       * The instance of {@link express.Application} used.
       * @type {express.Application}
       */
      ++cov_pn1anpnby.s[9];
      this.app = (0, _express2.default)();

      ++cov_pn1anpnby.s[10];
      this.app.use('/', _express2.default.static(this.path));

      /**
       * The server used.
       * @type {http.Server}
       */
      ++cov_pn1anpnby.s[11];
      this.server = this.app.listen(port);
      ++cov_pn1anpnby.s[12];
      this.server.on('listening', () => {
        ++cov_pn1anpnby.f[3];
        ++cov_pn1anpnby.s[13];
        return resolve(port);
      });
      ++cov_pn1anpnby.s[14];
      this.server.on('error', err => {
        ++cov_pn1anpnby.f[4];
        ++cov_pn1anpnby.s[15];
        return reject(err);
      });
    });
  }

  /**
   * Runs `blc` on the given port or {@link BrokenLinkChecker#url}.
   * @param {Number} [port] The port to check
   * @return {Promise<Number>} Resolved with `blc`'s exit code.
   */
  runChecker(port) {
    ++cov_pn1anpnby.f[5];
    ++cov_pn1anpnby.s[16];

    return new Promise((resolve, reject) => {
      ++cov_pn1anpnby.f[6];
      ++cov_pn1anpnby.s[17];

      if ((++cov_pn1anpnby.b[3][0], !port) && (++cov_pn1anpnby.b[3][1], !this.url)) {
        ++cov_pn1anpnby.b[2][0];
        ++cov_pn1anpnby.s[18];

        reject(new Error('No url given'));
      } else {
        ++cov_pn1anpnby.b[2][1];

        let args = (++cov_pn1anpnby.s[19], [port ? (++cov_pn1anpnby.b[4][0], `http://localhost:${ port }`) : (++cov_pn1anpnby.b[4][1], this.url), '--colors']);

        // Add options passed to blc
        ++cov_pn1anpnby.s[20];
        args = args.concat(this._argv);

        const blc = (++cov_pn1anpnby.s[21], (0, _child_process.spawn)(require.resolve('broken-link-checker/bin/blc'), args, {
          stdio: 'inherit'
        }));

        ++cov_pn1anpnby.s[22];
        blc.on('close', code => {
          ++cov_pn1anpnby.f[7];
          ++cov_pn1anpnby.s[23];
          return resolve(code);
        });
      }
    });
  }

  /**
   * Validates options.
   * @return {Promise<Object, Error>} Fulfilled with the parsed options, rejected if validation
   * failed.
   */
  validateOptions() {
    ++cov_pn1anpnby.f[8];
    ++cov_pn1anpnby.s[24];

    return new Promise((resolve, reject) => {
      ++cov_pn1anpnby.f[9];
      ++cov_pn1anpnby.s[25];

      this.options = (0, _yargs2.default)(this._argv).usage('Usage: $0 [options] <directory or url>').demandCommand(1, 1, 'Neither directory nor url given').version(_package2.default.version).alias('version', 'V').alias('help', 'h').option(_cliOptions2.default).help().fail((msg, err, y) => {
        ++cov_pn1anpnby.f[10];
        ++cov_pn1anpnby.s[26];

        console.log(y.help());

        ++cov_pn1anpnby.s[27];
        reject((++cov_pn1anpnby.b[5][0], err) || (++cov_pn1anpnby.b[5][1], new Error(msg)));
      }).argv;

      ++cov_pn1anpnby.s[28];
      resolve(this.options);
    });
  }

  /**
   * Sets either {@link BrokenLinkChecker#path} or {@link BrokenLinkChecker#path} from the first
   * non-option argument provided.
   */
  getPathOrUrl() {
    ++cov_pn1anpnby.f[11];

    const dirOrUrl = (++cov_pn1anpnby.s[29], this.options._[0]);
    const url = (++cov_pn1anpnby.s[30], (0, _url.parse)(dirOrUrl));

    ++cov_pn1anpnby.s[31];
    if (url.hostname) {
      ++cov_pn1anpnby.b[6][0];
      ++cov_pn1anpnby.s[32];

      this.url = dirOrUrl;
      ++cov_pn1anpnby.s[33];
      this.needServer = false;
    } else {
      ++cov_pn1anpnby.b[6][1];
      ++cov_pn1anpnby.s[34];

      this.path = (0, _path.join)(process.cwd(), dirOrUrl);
    }
  }

  /**
   * Exits BrokenLinkChecker with the specified exit code and (optionally) an error that occurred.
   * @param {Number} code The code to exit with.
   * @param {Error} err The error to report.
   * @return {Number} code The code to exit with.
   */
  exit(code, err) {
    ++cov_pn1anpnby.f[12];
    ++cov_pn1anpnby.s[35];

    if (err) {
      ++cov_pn1anpnby.b[7][0];
      ++cov_pn1anpnby.s[36];

      console.error(_chalk2.default.red(`Error: ${ err.message }`));
    } else {
      ++cov_pn1anpnby.b[7][1];
    }

    ++cov_pn1anpnby.s[37];
    if (this.server) {
      ++cov_pn1anpnby.b[8][0];
      ++cov_pn1anpnby.s[38];

      this.server.close();
    } else {
      ++cov_pn1anpnby.b[8][1];
    }

    ++cov_pn1anpnby.s[39];
    process.exitCode = code;

    ++cov_pn1anpnby.s[40];
    return code;
  }

  /**
   * Launches the CLI
   */
  launch() {
    ++cov_pn1anpnby.f[13];
    ++cov_pn1anpnby.s[41];

    return this.validateOptions().then(() => {
      ++cov_pn1anpnby.f[14];
      ++cov_pn1anpnby.s[42];
      return this.getPathOrUrl();
    }).then(() => {
      ++cov_pn1anpnby.f[15];
      ++cov_pn1anpnby.s[43];

      if (this.needServer) {
        ++cov_pn1anpnby.b[9][0];
        ++cov_pn1anpnby.s[44];

        return (0, _getPort2.default)().then(port => {
          ++cov_pn1anpnby.f[16];
          ++cov_pn1anpnby.s[45];
          return this.startServer(port);
        }).then(port => {
          ++cov_pn1anpnby.f[17];
          ++cov_pn1anpnby.s[46];
          return this.runChecker(port);
        });
      } else {
        ++cov_pn1anpnby.b[9][1];
      }

      ++cov_pn1anpnby.s[47];
      return this.runChecker();
    }).then(code => {
      ++cov_pn1anpnby.f[18];
      ++cov_pn1anpnby.s[48];
      return this.exit(code);
    }).catch(err => {
      ++cov_pn1anpnby.f[19];
      ++cov_pn1anpnby.s[49];
      return this.exit(1, err);
    });
  }

}

exports.default = BrokenLinkChecker; /**
                                      * @external {express.Application} http://expressjs.com/en/4x/api.html#app
                                      */

/**
 * @external {http.Server} https://nodejs.org/api/http.html#http_class_http_server
 */