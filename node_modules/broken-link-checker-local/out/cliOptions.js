'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_1s98d7ivwd = function () {
  var path = '/home/ubuntu/broken-link-checker-local/src/cliOptions.js',
      hash = 'fc5cff8a7baf64549accdf2357ce9ab5dbbc9d1d',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/ubuntu/broken-link-checker-local/src/cliOptions.js',
    statementMap: {
      '0': {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 80,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      '0': 0
    },
    f: {},
    b: {},
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _defaultOptions = require('broken-link-checker/lib/internal/defaultOptions');

var _defaultOptions2 = _interopRequireDefault(_defaultOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Command line options available
 * @type {Object}
 * @property {yargs.Option<String[]>} [exclude=[]] A keyword/glob to match links against. Can be
 * used multiple times.
 * @property {yargs.Option<Boolean>} [exclude-external=false] Will not check external links.
 * @property {yargs.Option<Boolean>} [exclude-internal=false] Will not check internal links.
 * @property {yargs.Option<Number>} [filter-level=1] The types of tags and attributes that are
 * considered links.
 * @property {yargs.Option<Boolean>} [follow=false] Force-follow robot exclusions.
 * @property {yargs.Option<Boolean>} [get=false] Change request method to GET.
 * @property {yargs.Option<Boolean>} [recursive=false] Recursively scan "crawl" the HTML
 * document(s).
 * @property {yargs.Option<String>} [user-agent] The user agent to use for link checks.
 * @property {yargs.Option<Boolean>} [verbose=false] Display excluded links.
 */
const CliOptions = (++cov_1s98d7ivwd.s[0], {
  exclude: {
    desc: 'A keyword/glob to match links against. Can be used multiple times.',
    default: _defaultOptions2.default.excludedKeywords
  },
  'exclude-external': {
    desc: 'Will not check external links.',
    alias: 'e',
    type: 'boolean',
    default: false
  },
  'exclude-internal': {
    desc: 'Will not check internal links.',
    alias: 'i',
    type: 'boolean',
    default: false
  },
  'filter-level': {
    desc: 'The types of tags and attributes that are considered links.\n' + '  0: clickable links\n' + '  1: 0 + media, iframes, meta refreshes\n' + '  2: 1 + stylesheets, scripts, forms\n' + '  3: 2 + metadata\n',
    type: 'number',
    default: _defaultOptions2.default.filterLevel
  },
  follow: {
    desc: 'Force-follow robot exclusions.',
    alias: 'f',
    type: 'boolean',
    default: false
  },
  get: {
    desc: 'Change request method to GET.',
    alias: 'g',
    type: 'boolean',
    default: false
  },
  ordered: {
    desc: 'Maintain the order of links as they appear in their HTML document.',
    alias: 'o',
    type: 'boolean',
    default: false
  },
  recursive: {
    desc: 'Recursively scan "crawl" the HTML document(s).',
    alias: 'r',
    type: 'boolean',
    default: false
  },
  'user-agent': {
    desc: 'The user agent to use for link checks.',
    type: 'string',
    default: _defaultOptions2.default.userAgent
  },
  verbose: {
    desc: 'Display excluded links.',
    alias: 'v',
    type: 'boolean',
    default: false
  }
});

exports.default = CliOptions;

/**
 * @external {yargs.Option} http://yargs.js.org/docs/#methods-optionskey-opt
 */